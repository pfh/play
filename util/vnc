#!/usr/bin/env python

import argparse, sys, os, subprocess, time, socket

parser = argparse.ArgumentParser()
parser.add_argument('-d', type=int, default=(os.getuid() % 1000 + 1), help='display number')
parser.add_argument("-g", metavar="WIDTHxHEIGHT", default="1920x1080", help='screen size, default is 1920x1080')
parser.add_argument("action", nargs="?", choices=["start","stop","restart","status"], help="what to do.")
args = parser.parse_args()

if not args.action:
    parser.print_help()

n = args.d
geometry = args.g
action = args.action

os.environ['DISPLAY'] = ':%d' % n

print
print "DISPLAY=:%d" % n
print


def background(command):
    os.system('nohup ' + command + ' >/dev/null 2>/dev/null &')

def get_pid():
    proc = subprocess.Popen(["netstat","-tnlp"],stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    pid = None
    for line in proc.communicate()[0].split('\n'):
        if not line.startswith('tcp'): continue
        parts = line.split()
        if not parts[3].endswith(":%d" % (5900+n)): continue
        assert pid is None
        pid, program = parts[6].split("/")
        assert program == "Xtightvnc"
        pid = int(pid)
    return pid


#def running():
#    return os.system('xset q >/dev/null 2>/dev/null') == 0

#if not running():

pid = get_pid()

if action in ("stop","restart"):
    if pid is None:
        print "VNC server not running, nothing to kill"
    else:
        print "Killing %d" % pid
        os.kill(pid,2)
        while True:
            pid = get_pid()
            if pid is None: break
            time.sleep(0.1)


if action in ("start","restart"):
    if pid is not None:
        print "Already running"
    else:
        background('Xtightvnc :%d -localhost -desktop X -depth 24 -dpi 120'
                   ' -geometry %s' % (n, geometry))
        
        print >> sys.stderr, 'Wait for server to start'
        while True:
           pid = get_pid()
           if pid is not None: break
           time.sleep(0.1)
        
        background("startlxde")

if pid is None:
    print "VNC server is not running"
else:
    print "VNC server is running"

    me = socket.gethostbyaddr(socket.gethostname())[0]
    
    print
    print "Port %d, local connections only, so connect via ssh tunnel, eg:" % (5900+n)
    print
    print "xtightvncviewer -via %s :%d" % (me, n)
    print



